-- Might not need if all counts are handled in message passing
function get_number_of_enemies(self)
	local count = 0
	for i in pairs(self.enemy_list) do
		count = count + 1
	end
	return count
end

function spawn_enemy(self, factory)
	msg.post(factory, "spawn_enemy")
end

function init(self)
	-- Keep track of all the enemies on the battlefield
	self.enemy_list = {}
	self.enemy_iterator = 0
	
	self.number_of_enemies = 0

	-- Keeps track of the number of turns passed, increments every time the enemies complete all their turns 
	self.turns_elapsed = 0
	
	-- For testing purposes
	-- table.insert(self.enemy_list, {url = "/enemyRat"})
	-- pprint(self.enemy_list)
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Do not need to check if it is player or enemy because if all the enemies went it will be the end of 
	-- the table, so then the player can go and the iterator is 0 that means player just ended turn
	if message_id == hash("end_turn") then
		if self.enemy_iterator == self.number_of_enemies then
			pprint("battle_controller.script: Enemy turns are over")
			-- Reset enemy list
			self.enemy_iterator = 0
			self.turns_elapsed = self.turns_elapsed + 1

			-- Should probably be moved or handled differently
			if self.turns_elapsed % 3 == 0 then
				spawn_enemy(self, "ratSpawner")
			end
			
			msg.post("/battlePlayer", "enemy_turn_over")
		else 
			self.enemy_iterator = self.enemy_iterator + 1
			msg.post(self.enemy_list[self.enemy_iterator].url, "start_turn")
		end

	-- Sent from the init() function of every new enemy so the controller can add them to the list
	elseif message_id == hash("new_enemy") then
		table.insert(self.enemy_list, message)
		self.number_of_enemies = self.number_of_enemies + 1
		
		pprint("battle_controller.script: Added ["..tostring(message.url)..
		"] to enemy list, there are now ["..self.number_of_enemies.."] enemies on the list")

	elseif message_id == hash("enemy_died") then
		for i,enemy in ipairs(self.enemy_list) do
			if enemy.url == message.url then
				table.remove(self.enemy_list, i)
				self.number_of_enemies = self.number_of_enemies - 1
				pprint("battle_controller.script: Removing ["..tostring(message.url).."] from battle")
			end
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
