-- This is the script that processes in-progress quests

--[[
Quest Update Chain: 
-------------------
1. quest_update message received from elsewhere:
2. update_quest()-->
3. update_type_quest()-->
4. check_quest_complete()-->
5. (*only if complete)set_quest_completable()
-------------------
--]]

--[[ Removes the quest from the quest handler ]]
local function remove_quest(self, quest_number)
	pprint("quest_handler.script: Removing Quest:"..self.current_quests[quest_number].quest_name)
	
	table.remove(self.current_quests, quest_number)
	self.number_of_quests = self.number_of_quests - 1

	-- Log message for debug purposes
	pprint("quest_handler.script: Updated current_quests: ")
	pprint(self.current_quests)
	pprint("quest_handler.script: Number of Quests: "..self.number_of_quests)
end

--[[ Sets quest complete on npc(Make sure to set quest_completed msg received on completing npc) ]]
local function set_quest_completable(self, quest_number)	
	self.current_quests[quest_number].quest_complete = true
	
	-- Send completion message to the quest_script attached to npc that you complete quest at, 
	-- set a message_id == hash("quest_completed") in the quest script to change anything
	msg.post(self.current_quests[quest_number].quest_completer_address, "quest_complete", {self.current_quests[quest_number].quest_name})
	
	-- Send message to quest log to visually let player know quest is completable, so they can collect the reward
	msg.post("questLog", "quest_complete", {self.current_quests[quest_number].quest_name})
end

-- [[ Checks if a quest is a completed, called from update_quest functions ]]
local function check_quest_complete(self, quest_number)
	-- If quest is a kill quest
	if self.current_quests[quest_number].amount_killed then
		if self.current_quests[quest_number].amount_killed == self. current_quests[quest_number].number_to_kill then
			set_quest_completable(self, quest_number)
		end
	-- Checks if basic talk quest
	elseif self.current_quests[quest_number].npc_to_talk_to then
		set_quest_completable(self, quest_number)
	end
end

--[[ Helper function that updates kill quests within update_quests ]]
local function update_kill_quest(self, quest_number, update_table)
	-- Increments kill count
	self.current_quests[quest_number].amount_killed = self.current_quests[quest_number].amount_killed + 1
	-- Send update data to questLog to visually update
	msg.post("questLog", "update_kill_quest", {quest_name = self.current_quests[quest_number].quest_name, amount_killed = self.current_quests[quest_number].amount_killed})
	check_quest_complete(self, quest_number)
end

--[[ Helper function that updates quests that require you to talk to a specific individual ]]
local function update_talk_quest(self, quest_number, update_table)
	-- Essentially completes quest for now, later can be added to be more complex, i.e. talk to multiple npcs
	-- msg.post("questLog", "update_talk_quest")
	check_quest_complete(self, quest_number)
end

--[[ Function to be called whenever a quest's progress is updated ]]
-- POSSIBLE ISSUE; if two quests are updated at same time?
local function update_quest(self, update_table)
	-- Search for a name match in current_quests
	for i in pairs(self.current_quests) do
		-- If name is found, player has the quest currently, so update the quest
		if self.current_quests[i].quest_name == update_table.quest_name then
			-- Check what type of quest it is and update properly
			if update_table.enemy_type then
				update_kill_quest(self, i, update_table)
			elseif update_table.npc_talked_to then
				update_talk_quest(self, i, update_table)
			end
		end
	end
end

-- Function to add a quest to the current quests
local function add_quest(self, quest_table)
	-- Make sure quest isn't already being handled before adding
	for i in pairs(self.current_quests) do
		if self.current_quests[i].quest_name == quest_table.quest_name then
			error("Tried to add quest: ["..quest_table.quest_name.."] to quest_handler, but quest is already in quest handler")
		end
	end
	-- Quest wasn't found so add it to the quest_handler
	self.number_of_quests = self.number_of_quests + 1
		
	-- Set base information			
	self.current_quests[self.number_of_quests] = {
		quest_name = quest_table.quest_name,
		quest_completer_addresss = quest_table.quest_completer_address,
		gold_reward = quest_table.monetary_reward,
		exp_reward = quest_table.exp_reward,
		-- MIGHT NOT NEED THIS BOOL
		quest_complete = false
	}

	-- Set additional information based on quest type
	if quest_table.quest_type == 'kill_quest' then
		self.current_quests[self.number_of_quests]['number_to_kill'] = quest_table.number_to_kill
		self.current_quests[self.number_of_quests]['amount_killed'] = 0
		
	elseif quest_table.quest_type == 'talk_quest' then
		self.current_quests[self.number_of_quests]['npc_to_talk_to'] = quest_table.npc_to_talk_to
		
	else 
		error("Unrecognized quest type: "..quest_table.quest_type.." \nNAME: "..quest_table.quest_name.." sent to add_quest()\n"..
		"Add type to add_quest() in quest_handler.script, or use a recognized quest type")
	end
	pprint("quest_handler.script: Quest:["..quest_table.quest_name.."] added to quest handler")
	pprint("quest_handler.script: There are ["..self.number_of_quests.."] in self.current_quests")
end

function init(self)
	-- Table to hold all current ongoing quests
	self.current_quests = {}
	self.number_of_quests = 0
	
	-- Holds the current level the player is in
	self.current_socket = nil
end

function on_message(self, message_id, message, sender)
	-- Quest handler has been sent a quest to add to list
	if message_id == hash("add_quest") then
		local quest_table = message
		add_quest(self, quest_table)
		
		-- After adding quest to backend, send to quest_log to be displayed
		msg.post("questLog", "quest_table", message)

	elseif message_id == hash("player_location") then
		--pprint("quest_handler.script: Received location of player at "..message[1].."")
		self.current_socket = message[1]

	elseif message_id == hash("reward_player") then
		pprint("quest_handler.script: Sending reward to [inventory??] and player_stats.script")
		for i,v in ipairs(self.current_quests) do
			if message[1] == v.quest_name then
				pprint("quest_handler.script: EXP VAL: "..v.exp_reward)
				pprint("quest_handler.script: GOLD VAL: "..v.gold_reward)
				local player_location = msg.url(self.current_socket, "/player", "player_stats")
				msg.post(player_location, "quest_reward", {v.gold_reward, v.exp_reward})
				remove_quest(self, i)
			else
				pprint("quest_handler.script: could not find quest reward for player for quest ["..message[1].."]")
			end
		end

	elseif message_id == hash("update_quest") then
		update_quest(self, message)
	end

	-- Test message for quest completion
	if message_id == hash("debug_quest_complete") then
		set_quest_complete(self, 1)
	end
end