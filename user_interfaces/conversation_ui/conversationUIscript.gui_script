-- This script contains all the functions needed to play conversations with any npc you have created a 
-- conversation for. Conversations are created in the create_conversation.lua module and should be left
-- inside the script for the npc they go with

-- To send a conversation to the GUI use msg.post("main:/conversationGUI#gui", "npc_conversation", conversation_table_name)
-- where the conversation_table is the table that you created inside of the npc using create_conversation.lua

---------------------------------------------------------------------------------------------------
--------------------------------------PRIMARY FUNCTIONS--------------------------------------------
----------------------These are all the functions that are needed to run the-----------------------
---------------------------conversations as they currently are laid out----------------------------
---------------------------------------------------------------------------------------------------

--[[ Shows conversation GUI and consumes player input ]]
local function open_ui(self)
	msg.post(".", "acquire_input_focus")
	gui.set_enabled(self.conversation_ui, true)
end

--[[ Closes conversation GUI and no longer consumes input ]]
local function close_ui(self)
	msg.post(".", "release_input_focus")
	gui.set_enabled(self.conversation_ui, false)	 
end

--[[ Hides and makes all player choices unselectable ]]
local function disable_choice_buttons(self)
	gui.set_enabled(self.player_choice_one, false)
	gui.set_enabled(self.player_choice_two, false)
	gui.set_enabled(self.player_choice_three, false)
	gui.set_enabled(self.player_choice_four, false)
end

--[[ Shows players choices based on conversation ]]
local function show_player_choices(self)
	if self.conversation_table.player_choices['option_one'] then
		gui.set_enabled(self.player_choice_one, true)
		gui.set_text(self.player_choice_one_text, self.conversation_table.player_choices['option_one'])
	end
	if self.conversation_table.player_choices['option_two'] then
		gui.set_enabled(self.player_choice_two, true)
		gui.set_text(self.player_choice_two_text, self.conversation_table.player_choices['option_two'])
	end
	if self.conversation_table.player_choices['option_three'] then
		gui.set_enabled(self.player_choice_three, true)
		gui.set_text(self.player_choice_three_text, self.conversation_table.player_choices['option_three'])
	end
	if self.conversation_table.player_choices['option_four'] then
		gui.set_enabled(self.player_choice_four, true)
		gui.set_text(self.player_choice_four_text, self.conversation_table.player_choices['option_four'])
	end
end

--[[ Sends player back to conversation options ]]
local function show_hub(self)
	-- If show_hub is used to return from a conversation then set npc text to hub return text
	if self.conversation_started == true then
		gui.set_text(self.npc_text, self.conversation_table.hub_return_text)	
	end
	
	-- Hide all buttons before setting choices to avoid extraneous buttons
	disable_choice_buttons(self)
	
	-- Sets return/goodbye button to goodbye so player can exit conversation
	gui.set_text(self.hub_button_text, "GoodBye")
	
	-- Reset conversation variables
	self.current_conversation = nil
	self.conversation_started = false
	
	-- Show the player conversation choices
	show_player_choices(self)
end

--[[ Sets up initial dialog with npc ]]
local function initialize_conversation(self)
	gui.set_text(self.npc_text, self.conversation_table.npc_greeting)	
	show_hub(self)
end

--[[ Plays next text string in npc_responses as well as player responses ]]
local function continue_conversation(self)
	-- Shows player responses or defaults to continue if none provided
	if self.conversation_table.player_responses[self.current_conversation] ~= nil then
		if self.conversation_table.player_responses[self.current_conversation][self.text_iterator] then
			gui.set_text(self.player_choice_one_text, self.conversation_table.player_responses[self.current_conversation][self.text_iterator])
		else
			gui.set_text(self.player_choice_one_text, "Continue")
		end
	else 
		gui.set_text(self.player_choice_one_text, "Continue")
	end
	
	-- Show npc text in text box/ returns to hub if dialog runs out
	if self.conversation_table.npc_responses[self.current_conversation][self.text_iterator] then
		gui.set_text(self.npc_text, self.conversation_table.npc_responses[self.current_conversation][self.text_iterator])
		
		-- Check if dialog is quest giving dialog
		if self.conversation_table.npc_responses[self.current_conversation][self.text_iterator] == self.conversation_table.quest_response_text then
			gui.set_enabled(self.player_choice_two, true)
			gui.set_text(self.player_choice_one_text, self.conversation_table.player_quest_responses['yes_option'])
			gui.set_text(self.player_choice_two_text, self.conversation_table.player_quest_responses['no_option'])
		end
	else
		close_ui(self)
	end
	
	self.text_iterator = self.text_iterator + 1
end

--[[ Starts conversation that the player selected ]]
local function start_conversation(self, player_choice)
	-- Prepe iterator to go through dialog
	self.text_iterator = 1
	
	-- Set return button so player can return to hub without finishing conversation
	gui.set_text(self.hub_button_text, "Return")
	
	-- Disable buttons that are not needed for dialog with npc
	disable_choice_buttons(self)
	
	-- Let script know that a conversation is ongoing and which one
	self.conversation_started = true
	self.current_conversation = player_choice
	
	-- Play first npc player dialog
	gui.set_enabled(self.player_choice_one, true)
	continue_conversation(self)
end

-- TODO set text to npc acceptance dialog, before closing, should not be able to accept quest again
-- even though text will not change yet, disable button or change to a standard? Avoid repeat quest acceptance
--[[ Functions handling what happens if player accepts quest ]]
local function accept_quest(self)
	-- Ensure that a quest is actually included in the conversation table
	if self.conversation_table.quest_table == nil then
		error("Conversation table from "..self.npc_url.." has no quest table attached")
	end
				
	-- Send out the fact that the quest has been accepted
	pprint("Quest: '"..self.conversation_table.quest_table.quest_name.."' sent to quest handler from conversationUIscript")
	msg.post("main:/questHandler", "add_quest", self.conversation_table.quest_table)
	msg.post(self.npc_url, "quest_accepted")

	-- Get rid of the decline quest button and continue with conversation
	gui.set_enabled(self.player_choice_two, false)
	continue_conversation(self)
end

--[[ Deal with player denying quest ]]
local function decline_quest(self)
	-- Send out the fact that the quest has been accepted
	pprint("quest '"..self.conversation_table.quest_table.quest_name.."' declined")
	
	gui.set_enabled(self.player_choice_two, false)
	continue_conversation(self)
end

---------------------------------------------------------------------------------------------------
---------------------------------------PRIMARY SCRIPT----------------------------------------------
-------------------------This is where all the functions are used to run---------------------------
-------------------------------------your conversations--------------------------------------------
---------------------------------------------------------------------------------------------------

function init(self)
	--[[ ALL THE VARIABLES NEEDED TO RUN THE CONVERSATION ]]
	-- Container for the conversation table
	self.conversation_table = {}
		
	-- Address holder for conversation sender
	self.npc_url = nil
	
	-- Set up GUI node access
	self.npc_text = gui.get_node("npcText")
	self.conversation_ui = gui.get_node("conversationUI")
    self.player_choice_one = gui.get_node("playerChoiceOne")
    self.player_choice_one_text = gui.get_node("playerChoiceOneText")
    self.player_choice_two = gui.get_node("playerChoiceTwo")
    self.player_choice_two_text = gui.get_node("playerChoiceTwoText")
    self.player_choice_three = gui.get_node("playerChoiceThree")
    self.player_choice_three_text = gui.get_node("playerChoiceThreeText")
    self.player_choice_four = gui.get_node("playerChoiceFour")
    self.player_choice_four_text = gui.get_node("playerChoiceFourText")
    self.hub_button = gui.get_node("hubButton")
	self.hub_button_text = gui.get_node("hubButtonText")
	self.npc_image = gui.get_node("npcImage")
	
	-- Iterator for iterating through npc dialog
	self.text_iterator = 1

	-- Variables for dealing with an ongoing conversation
	self.current_conversation = nil
	self.conversation_started = false
	
	-- Hide conversation GUI while not in use
	gui.set_enabled(self.conversation_ui, disable)
end

function on_message(self, message_id, message, sender)
    if message_id == hash("npc_conversation") then    	
    	-- Receive conversation data from npc
    	self.conversation_table = message
    	
    	-- Changes image to npc you are talking to
		if self.conversation_table.npc_name == 'default_npc' then
			error("No npc_name provided to conversation")
		end
		gui.set_texture(self.npc_image, hash("conversation_npcs"))
		gui.play_flipbook(self.npc_image, hash(self.conversation_table.npc_name))

		-- Get NPC's address to send messages to, used to send messages back to NPC, 
		-- for example if you want to change what NPC says if player says something
		self.npc_url = sender
		
		-- Initialize conversation variables
		self.current_conversation = nil
		self.conversation_started = false

		-- And finally start conversation
		open_ui(self)
    	initialize_conversation(self)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("mouse_press") and action.pressed then	
		-- Data required to read button press location
		local x = action.x
		local y = action.y
		
		-- RETURN/EXIT BUTTON
		if gui.pick_node(self.hub_button, x, y) then
			if gui.get_text(self.hub_button_text) == "GoodBye" then
				close_ui(self)
			else
				gui.set_text(self.npc_text, self.conversation_table.hub_return_text)
				show_hub(self)
			end			
		
		-- CHOICE BUTTON ONE
		elseif gui.pick_node(self.player_choice_one, x, y) then		
			-- What to do if choice one is currently accept quest button
			if gui.get_text(self.player_choice_one_text) == self.conversation_table.player_quest_responses['yes_option'] then
				accept_quest(self)
				
			-- Option one is now the continue conversation button
			elseif self.conversation_started then
				continue_conversation(self)
				
			-- If nothing else applies then the player is at hub, so start conversation with 'option one'
			else
				start_conversation(self, 'option_one')
			end
			
		-- CHOICE BUTTON TWO		
		elseif gui.pick_node(self.player_choice_two, x, y) then
			-- What to do if choice two is currently 'quest deny' button
			if gui.get_text(self.player_choice_two_text) == self.conversation_table.player_quest_responses['no_option'] then
				decline_quest(self)
			else
				start_conversation(self, 'option_two')
			end

		-- CHOICE BUTTON THREE	
 	   elseif gui.pick_node(self.player_choice_three, x, y) then
			start_conversation(self, 'option_three')	

		-- CHOICE BUTTON FOUR	
    	elseif gui.pick_node(self.player_choice_four, x, y) then
			start_conversation(self, 'option_four')
    	end
	end

	-- As long as input is being listened to i.e. "true" it will consume input and
	-- controls are disabled for player character movement and main menu
    return true
end