-- Animation functions are set up in a timeline, i.e. anim1 triggers first then anim2 etc.
local function anim4(self, node)
	-- animate scale to 100%
	-- local s = 0.26767 
	gui.animate(node, gui.PROP_SCALE, vmath.vector4(0.26767, 0.07727, 1, 0), gui.EASING_INOUT, 0.12, 0)
end

local function anim3(self, node)
	-- animate scale to 106%
	local s = .3
	gui.animate(node, gui.PROP_SCALE, vmath.vector4(s, s, s, 0), gui.EASING_INOUT, 0.12, 0, anim4)
end

local function anim2(self, node)
	-- animate scale to 98%
	local s = .2
	gui.animate(node, gui.PROP_SCALE, vmath.vector4(s, s, s, 0), gui.EASING_INOUT, 0.12, 0, anim3)
end

local function anim1(node, delay)
	-- set alpha to 1 to avoid bug where alpha remains changed if menu is left too soon
	local reset_alpha = gui.get_color(node)
	reset_alpha.w = 1
	gui.set_color(node, reset_alpha)
	
	-- set scale to 70%
	local start_scale = 0.1
	gui.set_scale(node, vmath.vector4(start_scale, start_scale, start_scale, 0))
	
	-- get current color and set alpha to 0 to fade up
	local from_color = gui.get_color(node)
	local to_color = gui.get_color(node)
	from_color.w = 0
	gui.set_color(node, from_color)
	
	-- animate alpha value from 0 to 1
	gui.animate(node, gui.PROP_COLOR, to_color, gui.EASING_IN, 0.2, delay)
	
	-- animate scale from 70% to 110%
	local s = .2
	gui.animate(node, gui.PROP_SCALE, vmath.vector4(s, s, s, 0), gui.EASING_IN, 0.2, delay, anim2)
end

function init(self)
    -- Node access variables
    self.main_menu = gui.get_node("mainMenu")
    self.resume_button = gui.get_node("resumeButton")
    self.quest_log_button = gui.get_node("questLogButton")
    self.save_button = gui.get_node("saveButton")
    self.load_button = gui.get_node("loadButton")
    self.quit_game_button = gui.get_node("quitButton")
    
	-- Disable main menu when not in use
    gui.set_enabled(self.main_menu, false)
    gui.set_enabled(gui.get_node("quitGameCheck"), false)
end

function on_message(self, message_id, message, sender)
	-- Player has clicked on menu button or pressed escape in the player_hud
	if message_id == hash("open_main_menu") then
		msg.post(".", "acquire_input_focus")
		gui.set_enabled(self.main_menu, true)
		
		local delay = 0.4
		-- Animate resume button
		-- anim1(gui.get_node("resumeButton"), delay)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("mouse_press") and action.pressed then
		local x = action.x
		local y = action.y
		
		if gui.pick_node(self.resume_button, x, y) then
			msg.post(".", "release_input_focus")
			gui.set_enabled(self.main_menu, false)
		
		elseif gui.pick_node(self.quest_log_button, x, y) then
			msg.post("questLog", "open_quest_log")
			msg.post(".", "release_input_focus")
			gui.set_enabled(self.main_menu, false)
			
		elseif gui.pick_node(self.save_button, x, y) then
			msg.post("save_handler", "save")
			
		elseif gui.pick_node(self.load_button, x, y) then
			msg.post("save_handler", "load")
			
		-- Player tries to quit, send are you sure message to screen
		elseif gui.pick_node(self.quit_game_button, x, y) then
			gui.set_enabled(gui.get_node("quitGameCheck"), true)
			gui.set_enabled(self.main_menu, false)
		elseif gui.pick_node(gui.get_node("acceptQuitButton"), x, y) then
			os.exit()
		elseif gui.pick_node(gui.get_node("declineQuitButton"), x, y) then
			gui.set_enabled(gui.get_node("quitGameCheck"), false)
			gui.set_enabled(self.main_menu, true)
		end
	end
	
	return true
end