local battle = require "game_systems/battle_system/battle_functions"

-- Enemy's health, inventory, and stats are dealt with in player_stats.script
go.property("x_move_distance", 128)
go.property("y_move_distance", 90.4)
go.property("health_points", 6)
go.property("damage", 1)

local function kill_enemy(self)
	pprint("enemy_"..tostring(go.get_id())..".script: Has died")
	-- Should play a death animation before using animation done to delete the object
	-- Send message to quest log so that it can update the kill rat quest if player has it
	msg.post("/battleController", "enemy_died", { url = msg.url() })
	msg.post("main:/questHandler#questData", "update_quest", {quest_name = "Rat Killer", enemy_type = "rat", })
	go.delete()
end

-- Will handle AI logic
local function calculate_next_move(self)
	if self.health_points >= .5 * self.health_points then
		
	end
end

function init(self)
	-- Will be used to help decide where to move next
	self.player_location = go.get_position("/battlePlayer")
	msg.post("/battleController", "new_enemy", { url = msg.url() })
	self.is_turn = false

	self.move_distance = nil
	self.move_direction = nil
end

function final(self)
end

function update(self, dt)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("start_turn") then
		pprint("enemy_rat.script: It is now the enemies turn")
		battle.try_moving(self, -battle.x_move_distance, 'x')
		--msg.post("/battleController", "end_turn", { msg.url() })
		
	elseif message_id == hash("player_attack") then
		if self.health_points - message[1] <= 0 then
			kill_enemy(self)
		else
			self.health_points = self.health_points - message[1]
			battle.animate_flash(self)
			pprint("enemy_rat.script: Rat now has ["..self.health_points.."] Health Points remaining")
		end

	elseif message_id == hash("ray_cast_response") and message.group == hash("battlePlayer") then
		pprint("enemy_rat.script: Attacking player")

		local n_position = go.get_position()
		local c_position = go.get_position()
		n_position.x = c_position.x - 40
		--go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, n_position, go.EASING_LINEAR, 1, battle.end_turn(self))
		battle.end_turn(self)
		
		msg.post("/battlePlayer#script", "damage_player", {damage = self.damage})

	elseif message_id == hash("ray_cast_missed") then
		battle.move(self, self.move_distance, self.move_direction)
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
