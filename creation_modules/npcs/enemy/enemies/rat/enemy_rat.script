local battle = require "game_systems/battle_system/battle_functions"

-- Enemy's health, inventory, and stats are dealt with in player_stats.script
go.property("health_points", 6)
go.property("damage", 1)

local function kill_enemy(self)
	pprint("enemy_"..tostring(go.get_id())..".script: Has died")
	-- Should play a death animation before using animation done to delete the object
	-- Send message to quest log so that it can update the kill rat quest if player has it
	msg.post("/battleController", "enemy_died", { url = msg.url() })
	msg.post("main:/questHandler#questData", "update_quest", {quest_name = "Rat Killer", enemy_type = "rat", })
	go.delete()
end

-- Chooses a random direction to move in
local function move_randomly(self)
	local random_number = math.random(4)
	if random_number == 1 then
		battle.try_moving(self, battle.y_move_distance, 'y')
	elseif random_number == 2 then
		battle.try_moving(self, -battle.y_move_distance, 'y')
	elseif random_number == 3 then
		battle.try_moving(self, battle.x_move_distance, 'x')
	else
		battle.try_moving(self, -battle.x_move_distance, 'x')
	end
end

-- Finds the next closest path to move towards player
-- TODO Extrodinarily ugly code, need to refactor or rethink method
local function move_around_obstacle(self)
	pprint("Trying to get around obstacle")
	local position = go.get_position()
	local player_position = go.get_position("/battlePlayer")

	local player_direction = player_position - position

	print(self.last_move_tried)

	if self.last_move_tried == 'x' and player_direction.y > 0 then
		pprint("Moving y: "..tostring(player_direction))
		battle.try_moving(self, battle.y_move_distance, 'y')
	elseif self.last_move_tried == 'x' and player_direction.y < 0 then
		pprint("Moving -y: "..tostring(player_direction))
		battle.try_moving(self, -(battle.y_move_distance), 'y')
	elseif self.last_move_tried == 'y' and player_direction.x > 0 then
		pprint("Moving x: "..tostring(player_direction))
		battle.try_moving(self, battle.x_move_distance, 'x')
	elseif self.last_move_tried == 'y' and player_direction.x < 0 then
		pprint("Moving -x: "..tostring(player_direction))
		battle.try_moving(self, -battle.x_move_distance, 'x')
	elseif self.last_move_tried == '-x' and player_direction.y < 0 then
		pprint("Moving -y: "..tostring(player_direction))
		battle.try_moving(self, -(battle.y_move_distance), 'y')
	elseif self.last_move_tried == '-x' and player_direction.y > 0 then
		pprint("Moving x: "..tostring(player_direction))
		battle.try_moving(self, battle.y_move_distance, 'y')
	elseif self.last_move_tried == '-y' and player_direction.x < 0 then
		pprint("Moving -x: "..tostring(player_direction))
		battle.try_moving(self, -battle.x_move_distance, 'x')
	elseif self.last_move_tried == '-y' and player_direction.x > 0 then
		pprint("Moving x: "..tostring(player_direction))
		battle.try_moving(self, battle.x_move_distance, 'x')
	end

	self.tried_moving_around_obstacle = true
end

-- Will handle AI logic
local function calculate_next_move(self)
	local health_cutoff = 0

	local position = go.get_position()
	local player_position = go.get_position("/battlePlayer")

	local player_direction = player_position - position
	pprint("enemy_rat.script: Player is direction: "..tostring(player_direction))

	-- Right now, aggressively attacking player is the only state
	if self.health_points >= health_cutoff * self.health_points then
		pprint("enemy_rat.script: Running towards player!")
		if math.abs(player_direction.x) > math.abs(player_direction.y) then
			if player_direction.x < 0 then 
				--pprint("Moving -x: "..tostring(player_direction))
				battle.try_moving(self, -(battle.x_move_distance), 'x')
				self.last_move_tried = '-x'
			else 
				--pprint("Moving x: "..tostring(player_direction))
				battle.try_moving(self, battle.x_move_distance, 'x')
				self.last_move_tried = 'x'
			end
		elseif math.abs(player_direction.y) > math.abs(player_direction.x) then
			if player_direction.y < 0 then 
				--pprint("Moving -y: "..tostring(player_direction))
				battle.try_moving(self, -(battle.y_move_distance), 'y')
				self.last_move_tried = '-y'
			else 
				--pprint("Moving y: "..tostring(player_direction))
				battle.try_moving(self, battle.y_move_distance, 'y')
				self.last_move_tried = 'y'
			end
		else 
			battle.try_moving(self, -battle.x_move_distance, 'x')
		end
	else 
		pprint("enemy_rat.script: Running scared!")
	end
end

function init(self)
	-- Used to generate random numbers for movement purposes
	math.randomseed(os.time())
	-- Will be used to help decide where to move next
	-- self.player_location = go.get_position("/battlePlayer")
	msg.post("/battleController", "new_enemy", { url = msg.url() })
	self.is_turn = false

	-- Used by the 'ai' to determine where to move if they are blocked
	self.tried_moving_around_obstacle = false
	self.last_move_tried = nil

	-- Used by the move system, do not alter or delete unless you know what it changes exactly
	self.move_distance = nil
	self.move_direction = nil
end

function final(self)
end

function update(self, dt)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("start_turn") then
		pprint("enemy_rat.script: It is now the enemies turn")
		calculate_next_move(self)
		--battle.try_moving(self, -battle.x_move_distance, 'x')
		--msg.post("/battleController", "end_turn", { msg.url() })
		
	elseif message_id == hash("player_attack") then
		if self.health_points - message[1] <= 0 then
			kill_enemy(self)
		else
			self.health_points = self.health_points - message[1]
			battle.animate_flash(self)
			pprint("enemy_rat.script: Rat now has ["..self.health_points.."] Health Points remaining")
		end

	elseif message_id == hash("ray_cast_response") and message.group == hash("battlePlayer") then
		pprint("enemy_rat.script: Attacking player")

		-- local n_position = go.get_position()
		-- local c_position = go.get_position()
		-- n_position.x = c_position.x - 40
		-- go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, n_position, go.EASING_LINEAR, 1, battle.end_turn(self))
		battle.end_turn(self)
		
		msg.post("/battlePlayer#script", "damage_player", {damage = self.damage})

	-- If running into a border tries to find the next closest path to the player, if that is blocked
	-- to, then just test randomly for a posssible move
	-- NOTE: If an enemy is placed or spawned in a place where it cannot move, it will break the battle 
	-- and turns will not progress and the enemy infinitely looks for an escape
	-- POSSIBLE ERROR: If an enemy gets surrounded by other enemies the combat will also break
	-- TODO Implement a try counter where after a certain number of tries the enemy will just quit its' turn 
	elseif message_id == hash("ray_cast_response") and message.group == hash("border") then
		if not self.tried_moving_around_obstacle then
			move_around_obstacle(self)
		else
			move_randomly(self)
		end
		
	elseif message_id == hash("ray_cast_response") and message.group == hash("enemy") then
		if not self.tried_moving_around_obstacle then
			move_around_obstacle(self)
		else
			move_randomly(self)
		end

	elseif message_id == hash("ray_cast_missed") then
		battle.move(self, self.move_distance, self.move_direction)
		self.tried_moving_around_obstacle = false
	end
end
