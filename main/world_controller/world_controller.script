function init(self)
	self.current_level = "#town"
	
	msg.post("#town", "load")
	msg.post(".", "acquire_input_focus")
	
	-- Better way to play music, or place music?
	-- msg.post("farm_background_music#sound", "play_sound", {delay = 1, gain = 0.5})
end

function on_message(self, message_id, message, sender)
	-- Message sent from world_door.script to let controller know, switch worlds
	if message_id == hash("load_world") then
		pprint("World transfer URL's:")
		pprint(message)
		
		self.current_level = message.other_world_url
		
		msg.post(message.other_world_url, "load")
		msg.post(message.current_world_url, "unload")
	end
	
	if message_id == hash("proxy_loaded") then 	-- Once collection is loaded, initialize and enable collection
		msg.post(sender, "init")	-- init recursively initializes all objects in collection			
		msg.post(sender, "enable")	-- enable recursively enables all the objects contained in the collection
		-- you only need to send enable by itself, init just gives finer control over initialization process
	end

	if message_id == hash("start_battle") then
		local battle_level_url = msg.url()
		battle_level_url.socket = "main"
		battle_level_url.path = hash("/controller")
		battle_level_url.fragment = hash("battle")

		--[[
		local current_level_url = msg.url()
		current_level_url.socket = "main"
		current_level_url.path = hash("/controller")
		current_level_url.fragment = hash("town")]]

		-- Can also use "#battle" and "#town" in place of the constructed urls
		
		msg.post(battle_level_url, "load")
		msg.post(self.current_level, "unload")
		
		self.current_level = battle_level_url
	end

	if message_id == hash("exit_battle") then
		local town_level_url = msg.url()
		
		town_level_url.socket = "main"
		town_level_url.path = hash("/controller")
		town_level_url.fragment = hash("town")

		msg.post(town_level_url, "load")
		msg.post(self.current_level, "unload")
	end
end