-- Include the module to create a conversation and quest
local create_conversation = require "creation_modules/create_conversation"
local create_quest = require "creation_modules/create_quest"

-- AI behavior should be moved into a seperate script
function init(self)
	-- Conversation information
	-- Use default greeting
	local player_choice_one = 'Listen to owner'
	local owner_responses_one = {
						"I found the rats who have been ruining our crops",
						"They're nested in out basement, but I can't get into that corner",
						"Would you be able to take care of that for me?",
						"Oh don't look at me like that.",
						"A couple of good swipes at them and they'll be gone for good.",
						"How about I give you a treat afterwards?",
						"I knew I could count on you! Now go get 'em."
						}
	local player_responses_one = {
						"Continue listening",
						"Continue listening",
						"What? That's disgusting! Rats are filthy and carry disease. Can't you find another way to do it?"
						}
	local player_yes_response = "Fine!Fine! But you owe me, you hear?"
	local player_no_response = "Hell no! You can't bribe me!"
	
	-- Quest information
	local quest_name = 'Rat Killer'
	local quest_description = 'Your new owner has asked you to kill 7 rats in her basement'
	local quest_giver = 'Owner'
	local gold_reward = 10
	local exp_reward = 10
	local enemy_type = 'rat'
	local rats_to_kill = 7
	
	
	-- Creating default conversation table
	self.owner_conversation = create_conversation.get_conversation_table()
	
	-- Setting conversation values
	-- Option one
	create_conversation.set_player_option(self.owner_conversation, 'option_one', player_choice_one)
	create_conversation.set_npc_quest_request(self.owner_conversation, 'option_one', owner_responses_one, owner_responses_one[6], 'Rat killer') 
	create_conversation.set_player_responses(self.owner_conversation, 'option_one', player_responses_one)
	create_conversation.set_player_quest_responses(self.owner_conversation, player_yes_response, player_no_response)
	
	-- Creating default quest table
	self.owner_quest = create_quest.get_quest_table()
	
	-- Set quest values
	create_quest.set_kill_quest(self.owner_quest, enemy_type, rats_to_kill)
	create_quest.set_quest_name(self.owner_quest, quest_name)
	create_quest.set_quest_description(self.owner_quest, quest_description)
	create_quest.set_quest_reward(self.owner_quest, exp_reward, gold_reward)
	create_quest.set_quest_giver(self.owner_quest, quest_giver)

	-- Add quest to conversation
	create_conversation.set_quest(self.owner_conversation, self.owner_quest)
end

function update(self, dt)
	-- TODO Owner should face player when talking to
end

function on_message(self, message_id, message, sender)
	
	-- player.script sends message letting npc know to send its conversation data to the conversation 
	-- user interface which automatically opens and starts conversation
	if message_id == hash("start_conversation") then
		msg.post("main:/conversationGUI#gui", "npc_conversation", self.owner_conversation)
		
	elseif message_id == hash("quest_accepted") then
		-- Player has accepted quest so change quest text to something else
		create_conversation.set_npc_responses(self.owner_conversation, 'option_one', {'Come back once the rats are dead'})
		
	elseif message_id == hash("quest_completed") then
		pprint("QUEST COMPLETE WOO")
	end
end

