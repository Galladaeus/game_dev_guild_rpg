local map_data = require "levels/town/outside/map/farmLand"

-- Gets the tile data for number in layers[layer_number].data[data_iter]
local function get_tile_data(self)
	if self.draw_data[self.data_iter] < self.first_tileset_tilecount then

		if self.draw_data[self.data_iter] == 0 then 
			return false
		end

		for i,v in ipairs(self.first_tileset_tiles) do 
			if (v.id + 1) == self.draw_data[self.data_iter] then
				pprint("map_farm.script:Changing tile to "..v.image) 
				self.tile_to_draw = v.image
				return true
			end
		end
	else
		pprint("Tile not contained in first tileset")
		return false
		-- Draw tile from different tileset
	end
	pprint("map_farm.script: Unable to find tile???")
end

function init(self)
	-- How many tiles are in the first tileset REMEMBER: tile id's start off at 0 so the final tile is one less than 
	-- the tilecount
	self.first_tileset_tilecount = map_data.tilesets[1].tilecount

	self.first_tileset_tiles = map_data.tilesets[1].tiles

	-- The tile image to draw
	self.tile_to_draw = "corn_E"

	-- Basic info to calculate map
	local tile_width = map_data.tilewidth
	local tile_height = map_data.tileheight + 20
	local map_width = map_data.width
	local map_height = map_data.height

	local map_size = vmath.vector3(tile_width * map_width, tile_height * map_height, 0) -- Total size of map, needed to calculate collision borders
	local pos = vmath.vector3(0, 0, 0) -- Start of isometric grid
	local screen_pos = vmath.vector3(0, 0, 0) -- Top left of grid for isometric grid

	-- Handle all the layers
	self.layer_iter = 1
	self.total_layers = 3

	-- Data of what to draw, make sure to label different animations 1, 2, 3...
	self.draw_data = map_data.layers[self.layer_iter].data
	self.data_iter = 1

	--[[for i, p in ipairs(drawData) do -- Print tile numbers to console
		print(p)
		end]]

	-- Table to contain tile's and collision border
	--self.tile_map = {}
	self.border = {}
	
	--Draw the tiles
	while self.layer_iter <= self.total_layers do 
		self.data_iter = 1
		self.draw_data = map_data.layers[self.layer_iter].data
		for i = 1, map_width do
			for j = 1, map_height do
				-- draw row of blocks
				-- Only create a tile if it is in the range of this tileset
				if get_tile_data(self) then
					pprint(self.tile_to_draw)
					--self.tile_map = 
					factory.create("#farmTileFactory", screen_pos, nil, { image = hash(self.tile_to_draw) } )
				end
				self.data_iter = self.data_iter + 1
				screen_pos.x = screen_pos.x + (tile_width/2)
				screen_pos.y = screen_pos.y - (tile_height/2)
				-- screenpos.z = screenpos.z + .00001 -- Since map is drawn from top left - down there is no need to touch z-axis
			end	
			-- draw columns of blocks
			screen_pos.x = (pos.x) - (tile_width/2) * i
			screen_pos.y = (pos.y) - (tile_height/2) * i
			-- screenpos.z = screenpos.z + .00001 * i
		end
		screen_pos.x = pos.x
		screen_pos.y = pos.y
		screen_pos.z = screen_pos.z + .0001

		self.layer_iter = self.layer_iter + 1
		pprint("map_farm.script: New_layer: "..self.layer_iter)
	end
	self.layer_iter = 0
end