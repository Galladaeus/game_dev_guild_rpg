--TODO Find out how to do delays, so animations and movement can look better
local battle = require "game_systems/battle_system/battle_functions"

-- Player's health, inventory, and stats are dealt with in player_stats.script
go.property("x_move_distance", 128)
go.property("y_move_distance", 90.4)
go.property("player_damage", 2)

-- Pre-hashing ids improves performance
local input_up = hash("up")
local input_down = hash("down")
local input_left = hash("left")
local input_right = hash("right")
local input_action = hash("action")
local input_attack = hash("mouse_press")
local anim_run = hash("run_right")
local anim_idle = hash("idle_right")

--[[ Plays an animation ]]
local function play_animation(self, animation)
	-- Prevent same animation from starting over and over again
	if self.animation_playing ~= animation then
		msg.post("#sprite", "play_animation", {id = hash(animation)})
		self.animation_playing = animation
	end
end

-- [[ Sets animation based on action ]]
local function update_animations(self)
	if self.dir.x == 1 then
		play_animation(self, "idleRight")
	elseif self.dir.x == -1 then
		play_animation(self, "idleLeft")
	elseif self.dir.y == 1 then
		play_animation(self, "idleUp")
	elseif self.dir.y == -1 then
		play_animation(self, "idleDown")
	end 
end

-- Function for when player attacks by moving into an enemy
local function attack(self, enemy)
	self.is_turn = false
	play_animation(self, "attackRight")
	msg.post(enemy, "player_attack", { self.player_damage })
	-- End turn moved to animation_done message
	--battle.end_turn(self)
end

function init(self)
	msg.post(".", "acquire_input_focus")

	msg.post("#player_stats", "test")

	-- Sends current player location to message hub, so any script that needs to send 
	-- any messages to the current level game objects have the socket needed
	local player_url = msg.url()
	-- Sending to battleController so it can compare url to know that it is the player turn that has ended
	msg.post("main:/controller#message_hub", "player_location", { player_url.socket })
	msg.post("main:/debugCommands", "in_battle")

	self.animation_playing = nil -- Checks if animation is playing
	self.dir = vmath.vector3(1, 0, 0) -- Keep direction of player

	-- Required for movement, because moving happens after a ray_cast_response is received
	self.move_distance = nil
	self.move_direction = nil

	self.is_turn = true
end

function update(self, dt)
	-- msg.post("camera", "look_at") Camera is childed to player, this can be used as part of persp camera
	-- pprint("battle_player.script: currently player turn == "..tostring(self.player_turn))
end

function on_message(self, message_id, message, sender)
	-- TODO Possibly reorder messages so the highly used are on top, trigger_response is much less common
	if message_id == hash("ray_cast_response") and message.group == hash("door") then
		msg.post("main:/exitCheck", "open_exit_check", { message.id }) -- Double check that player wants to leave battle 

	-- Stop player from moving and ending turn if their is a border in the way
	elseif message_id == hash("ray_cast_response") and message.group == hash("border") then
		pprint("battle_player.script: ray_cast dectected border, player movement stopped")
		pprint(message)

	-- Player has ran into an enemy, so attack the enemy
	elseif message_id == hash("ray_cast_response") and message.group == hash("enemy") then
		attack(self, message.id)

	-- Lets script know that the space ahead is clear and is good to move the player
	elseif message_id == hash("ray_cast_missed") then
		battle.move(self, self.move_distance, self.move_direction)
		--print("battle_player.script: player is good to move")

	elseif message_id == hash("damage_player") then
		battle.animate_flash(self)
		msg.post("#player_stats", "damage_player", message)

	-- Sets player back to correct idle after attack animation and ends player turn
	elseif message_id == hash("animation_done") and message.id == hash("attackRight") then 
		update_animations(self)
		battle.end_turn(self)

	elseif message_id == hash("enemy_turn_over") then
		battle.start_turn(self)
	end
end

function on_input(self, action_id, action)
	-- TODO Implement attack, either running into enemy or pressing an attack key (i.e. for invis enemies or otherwise)
	-- Player can only perform move and attack actions on turn
	if self.is_turn == true then
		if action_id == input_up and action.pressed then
			if self.dir.y == 1 then
				battle.try_moving(self, battle.y_move_distance, 'y')
			else
				-- Is this slower? 
				-- self.dir = vmath.vector3(0,1,0)
				self.dir.y = 1
				self.dir.x = 0
				update_animations(self)
			end
		elseif action_id == input_down and action.pressed then
			if self.dir.y == -1 then
				battle.try_moving(self, -(battle.y_move_distance), 'y')
			else
				self.dir.y = -1
				self.dir.x = 0
				update_animations(self)
			end
		elseif action_id == input_left and action.pressed then
			if self.dir.x == -1 then
				battle.try_moving(self, -(battle.x_move_distance), 'x') 
			else
				self.dir.x = -1
				self.dir.y = 0
				update_animations(self)
			end
		elseif action_id == input_right and action.pressed then
			if self.dir.x == 1 then
				battle.try_moving(self, battle.x_move_distance, 'x') 
			else
				self.dir.x = 1
				self.dir.y = 0
				update_animations(self)
			end
		end
	end
end