go.property("player_speed", 300)

-- Pre-hashing ids improves performance
local input_up = hash("up")
local input_down = hash("down")
local input_left = hash("left")
local input_right = hash("right")
local input_action = hash("action")
local input_attack = hash("mouse_press")
local anim_run = hash("run_right")
local anim_idle = hash("idle_right")

-- Temp function to print a table's data
local function dump(o)
	if type(o) == 'table' then
		local s = '{ '
		for k,v in pairs(o) do
		if type(k) ~= 'number' then k = '"'..k..'"' end
		s = s .. '['..k..'] = ' .. dump(v) .. ','
	end
		return s .. '} '
	else
		return tostring(o)
	end
end

--[[ Plays an animation ]]
local function play_animation(self, animation)
	-- Prevent same animation from starting over and over again
	if self.animation_playing ~= animation then
		msg.post("#sprite", "play_animation", {id = hash(animation)})
		self.animation_playing = animation
	end
end

-- [[ Sets animation based on action ]]
-- Way too clunky, how to do better?
local function update_animations(self)
	--pprint(self.dir)
	if (self.vel.x == 0 and self.vel.y == 0) and self.dir.x == 1 then
		play_animation(self, "idleRight")
	elseif (self.vel.x == 0 and self.vel.y == 0) and self.dir.x == -1 then
		play_animation(self, "idleLeft")
	elseif (self.vel.x == 0 and self.vel.y == 0) and self.dir.y == 1 then
		play_animation(self, "idleUp")
	elseif (self.vel.x == 0 and self.vel.y == 0) and self.dir.y == -1 then
		play_animation(self, "idleDown")
	elseif (self.vel.x == 0 and self.vel.y == 0) and self.dir.x < 0 and self.dir.y < 0 then
		-- idleDownLeft
		play_animation(self, "idleLeft")
	elseif (self.vel.x == 0 and self.vel.y == 0) and self.dir.x > 0 and self.dir.y < 0 then
		-- idelDownRight
		play_animation(self, "idleRight")
	elseif (self.vel.x == 0 and self.vel.y == 0) and self.dir.x > 0 and self.dir.y > 0 then
		-- idelupRight
		play_animation(self, "idleRight")
	elseif (self.vel.x == 0 and self.vel.y == 0) and self.dir.x < 0 and self.dir.y < 0 then
		-- idelDownRight
		play_animation(self, "idleRight")
	elseif self.vel.x > 0 and self.vel.y > 0 then
		play_animation(self, "upRightWalk")
	elseif self.vel.x < 0 and self.vel.y > 0 then
		play_animation(self, "upLeftWalk")
	elseif self.vel.x > 0 and self.vel.y < 0 then
		play_animation(self, "downRightWalk")
	elseif self.vel.x < 0 and self.vel.y < 0 then 
		play_animation(self, "downLeftWalk")
	elseif self.vel.x > 0 then
		play_animation(self, "walkRight")
	elseif self.vel.x < 0 then
		play_animation(self, "walkLeft")
	elseif self.vel.y > 0 then
		play_animation(self, "upWalk")
	elseif self.vel.y < 0 then
		play_animation(self, "downWalk")
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("#camera", "acquire_camera_focus")
	--go.set_position(vmath.vector3(100,500,0), "#camera")

	-- Sends current player location to message hub, so any script that needs to send 
	-- any messages to the current level game objects have the socket needed
	player_url = msg.url()
	--pprint("player.script: Current player URL: "..player_url.socket)
	--pprint("player.script: Current Collection: "..player_url.socket)
	msg.post("main:/controller#message_hub", "player_location", { player_url.socket })

	self.vel = vmath.vector3() -- Position of player
	self.animation_playing = nil -- Checks if animation is playing
	self.in_range_of_npc = false -- Keep track if player is in range to start conversation
	--self.inBattle = false
	self.dir = vmath.vector3(0, 1, 0)
	self.npc_address = nil
end


function update(self, dt)
	-- msg.post("camera", "look_at") Camera is currently attached to the go and has focus

	-- Adjust y velocity to match the grid movement
	if self.vel.x ~= 0 then 
		self.vel.y = self.vel.y * .60
	end
	
	local pos = go.get_position() 
	pos = pos + self.vel * dt 
	go.set_position(pos) 
	update_animations(self)

	if self.in_range_of_npc == true then
		msg.post(self.npc_address, "player_in_range")
	end

	-- Used to send the conversation message to correct npc
	self.npc_address = nil
	
	self.vel.x = 0 
	self.vel.y = 0
	self.in_range_of_npc = false
end

function on_message(self, message_id, message, sender)
	-- If player enters a door
	if message_id == hash("trigger_response") then
		pprint(tostring(message.other_id).." triggered")
		msg.post(message.other_id, "player_entered")
	end
	
	if message_id == hash("contact_point_response") then
		if message.group == hash("npc") then -- TODO Should use collision response for npc, seperate later
			self.in_range_of_npc = true
			self.npc_address = message.other_id
		elseif message.group == hash("border") then
			local newpos = go.get_position() + message.normal * message.distance	-- Seperate player and collision so player cannot enter
			go.set_position(newpos)
		end
	end
	
end

function on_input(self, action_id, action)
	if action_id == input_up then
		self.vel.y = self.player_speed 
	elseif action_id == input_down then
		self.vel.y = -self.player_speed 
	elseif action_id == input_left then
		self.vel.x = -self.player_speed  
	elseif action_id == input_right then
		self.vel.x = self.player_speed 

	-- Using action.pressed prevents button from registering multiple presses from one key press
	elseif action_id == input_action and self.in_range_of_npc == true and action.pressed then
		msg.post(self.npc_address, "start_conversation")
	end

	-- Normalize direction to NESW
	if vmath.length(self.vel) > 0 then
		self.moving = true
		self.dir = vmath.normalize(self.vel)
	end
end